package address_class_2;//Rowan Turner//February 1, 2018//CS 64//Assignment 2//Ch 11 Searching and Sorting/** * A class for Names to be part of AddressInfo objects * @author Rowan * */public class Name implements Comparable<Name>, java.io.Serializable {	/**	 * Reference to a person's given name	 */	private String myFirst;	/**	 * Reference to a person's middle name	 */	private String myMiddle;	/**	 * Reference to a person's family name	 */	private String myFamily;		/**	 * 3 parameter constructor	 * @param theFirst The first name to be assigned to myFirst	 * @param theMiddle The middle name to be assigned to myMiddle	 * @param theFamily The family name to be assigned to myFaimly	 */	public Name(String theFirst, String theMiddle, String theFamily) {		myFirst = theFirst;		myMiddle = theMiddle;		myFamily = theFamily;	}//3 parameter constructor		/**	 * 2 parameter constructor, assigns an empty string to myMiddle	 * @param theFirst The first name to be assigned to myFirst	 * @param theFamily The family name to be assigned to myFamily	 */	public Name(String theFirst, String theFamily) {		myFirst = theFirst;		myMiddle = "";		myFamily = theFamily;	}//2 parameter constructor	/*	 * Returns the first name of the Name that called it	 * @return Returns myFirst	 */	public String getFirst() {		return myFirst;	}//getFirst		/*	 * Returns the middle name of the Name that called it	 * @return Returns myMiddle	 */	public String getMiddle() {		return myMiddle;	}//getMiddle	/*	 * Returns the family name of the Name that called it	 * @return Returns myFamily	 */	public String getFamily() {		return myFamily;	}//getFamily	/**	 * Sets myFirst in the Name that called it	 * @param theFirst The first name being assigned	 */	public void setFirst(String theFirst) {		myFirst = theFirst;	}//setFirst		/**	 * Sets myMiddle in the Name that called it	 * @param theMiddle The middle name being assigned	 */	public void setMiddle(String theMiddle) {		myMiddle = theMiddle;	}//setMiddle		/**	 * Sets myFamily in the Name that called it	 * @param theFamily The family name being assigned	 */	public void setFamily(String theFamily) {		myFamily = theFamily;	}//setFamily	/**	 * Equals method for Name class. Checks all three instance variables.	 * @param theOther The object being compared to by the invoking Name. Typecast to a Name	 * @return Returns true if invoking and parameter are equal.	 */	public boolean equals(Object theOther) {		Name theName = (Name)theOther;		return myFamily.equals(theName.myFamily) 				&& myFirst.equals(theName.myFirst)				&& myMiddle.equals(theName.myMiddle);	}// equals		/**	 * Checks if the invoking Name comes before the parameter Name	 * @param theName The name being compared to	 * @return Returns true if the invoking Name comes before the parameter	 */	public boolean before(Name theName) {		return compareTo(theName)<0;	}//before		/**	 * Checks if the invoking Name comes after the parameter Name	 * @param theName The name being compared to	 * @return Returns true if the invoking Name comes after the parameter	 */	public boolean after(Name theName) {		return compareTo(theName)>0;	}//after	/**	 * Compares the invoking Name to the passed Name, checking myFamily, then myFirst, then myMiddle.	 * @param theName The Name being compared to	 * @return Returns a negative int if the invoking Name is less than the parameter, 0 if they are equal, positive if it is greater than	 */	public int compareTo(Name theName) {		int compareFamily = myFamily.compareTo(theName.myFamily); 		if (compareFamily != 0) {			return compareFamily;		}// family names were different		int compareFirst = myFirst.compareTo(theName.myFirst); 		if (compareFirst != 0) {			return compareFirst;		}//  first names were different with identical family names 		return myMiddle.compareTo(theName.myMiddle);	}// compareTo		/**	 * toString method for the Name class, with String order: myFamily then myFirst then myMiddle	 * @return Returns a string representation of the invoking Name	 */	public String toString() {			return myFamily + ", " + myFirst + (myMiddle.equals("") ? "" : " " + myMiddle);	}//toString}// Name